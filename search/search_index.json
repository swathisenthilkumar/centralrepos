{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"input/","text":"... Area # ASVS Level CWE NIST Verification Requirement uri Valid Source Code Reference Comment Tool Used Input Validation Requirements 5.1.1 1 235 nan Verify that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, or environment variables). https://cwe.mitre.org/data/definitions/235.html nan https://cwe.mitre.org/data/definitions/420.html nan nan nan 5.1.2 1 915 nan Verify that frameworks protect against mass parameter assignment attacks, or that the application has countermeasures to protect against unsafe parameter assignment, such as marking fields private or similar. ( C5 ) https://cwe.mitre.org/data/definitions/915.html nan nan nan nan nan 5.1.3 1 20 nan Verify that all input (HTML form fields, REST requests, URL parameters, HTTP headers, cookies, batch files, RSS feeds, etc) is validated using positive validation (allow lists). ( C5 ) https://cwe.mitre.org/data/definitions/20.html nan nan nan nan nan 5.1.4 1 20 nan Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers or telephone, or validating that two related fields are reasonable, such as checking that suburb and zip/postcode match). ( C5 ) https://cwe.mitre.org/data/definitions/20.html nan nan nan nan nan 5.1.5 1 601 nan Verify that URL redirects and forwards only allow destinations which appear on an allow list, or show a warning when redirecting to potentially untrusted content. https://cwe.mitre.org/data/definitions/601.html nan nan nan nan Sanitization and Sandboxing Requirements 5.2.1 1 116 nan Verify that all untrusted HTML input from WYSIWYG editors or similar is properly sanitized with an HTML sanitizer library or framework feature. ( C5 ) https://cwe.mitre.org/data/definitions/116.html nan nan nan nan nan 5.2.2 1 138 nan Verify that unstructured data is sanitized to enforce safety measures such as allowed characters and length. https://cwe.mitre.org/data/definitions/138.html nan nan nan nan nan 5.2.3 1 147 nan Verify that the application sanitizes user input before passing to mail systems to protect against SMTP or IMAP injection. https://cwe.mitre.org/data/definitions/147.html nan nan nan nan nan 5.2.4 1 95 nan Verify that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative, any user input being included must be sanitized or sandboxed before being executed. https://cwe.mitre.org/data/definitions/95.html nan nan nan nan nan 5.2.5 1 94 nan Verify that the application protects against template injection attacks by ensuring that any user input being included is sanitized or sandboxed. https://cwe.mitre.org/data/definitions/94.html nan nan nan nan nan 5.2.6 1 918 nan Verify that the application protects against SSRF attacks, by validating or sanitizing untrusted data or HTTP file metadata, such as filenames and URL input fields, and uses allow lists of protocols, domains, paths and ports. https://cwe.mitre.org/data/definitions/918.html nan nan nan nan nan 5.2.7 1 159 nan Verify that the application sanitizes, disables, or sandboxes user-supplied Scalable Vector Graphics (SVG) scriptable content, especially as they relate to XSS resulting from inline scripts, and foreignObject. https://cwe.mitre.org/data/definitions/159.html nan nan nan nan nan 5.2.8 1 94 nan Verify that the application sanitizes, disables, or sandboxes user-supplied scriptable or expression template language content, such as Markdown, CSS or XSL stylesheets, BBCode, or similar. https://cwe.mitre.org/data/definitions/94.html nan nan nan nan Output encoding and Injection Prevention Requirements 5.3.1 1 116 nan Verify that output encoding is relevant for the interpreter and context required. For example, use encoders specifically for HTML values, HTML attributes, JavaScript, URL parameters, HTTP headers, SMTP, and others as the context requires, especially from untrusted inputs (e.g. names with Unicode or apostrophes, such as \u306d\u3053 or O'Hara). ( C4 ) https://cwe.mitre.org/data/definitions/116.html nan nan nan nan nan 5.3.2 1 176 nan Verify that output encoding preserves the user's chosen character set and locale, such that any Unicode character point is valid and safely handled. ( C4 ) https://cwe.mitre.org/data/definitions/176.html nan nan nan nan nan 5.3.3 1 79 nan Verify that context-aware, preferably automated - or at worst, manual - output escaping protects against reflected, stored, and DOM based XSS. ( C4 ) https://cwe.mitre.org/data/definitions/79.html nan nan nan nan nan 5.3.4 1 89 nan Verify that data selection or database queries (e.g. SQL, HQL, ORM, NoSQL) use parameterized queries, ORMs, entity frameworks, or are otherwise protected from database injection attacks. ( C3 ) https://cwe.mitre.org/data/definitions/89.html nan nan nan nan nan 5.3.5 1 89 nan Verify that where parameterized or safer mechanisms are not present, context-specific output encoding is used to protect against injection attacks, such as the use of SQL escaping to protect against SQL injection. ( C3, C4 ) https://cwe.mitre.org/data/definitions/89.html nan nan nan nan nan 5.3.6 1 830 nan Verify that the application protects against JavaScript or JSON injection attacks, including for eval attacks, remote JavaScript includes, Content Security Policy (CSP) bypasses, DOM XSS, and JavaScript expression evaluation. ( C4 ) https://cwe.mitre.org/data/definitions/830.html nan nan nan nan nan 5.3.7 1 943 nan Verify that the application protects against LDAP injection vulnerabilities, or that specific security controls to prevent LDAP injection have been implemented. ( C4 ) https://cwe.mitre.org/data/definitions/943.html nan nan nan nan nan 5.3.8 1 78 nan Verify that the application protects against OS command injection and that operating system calls use parameterized OS queries or use contextual command line output encoding. ( C4 ) https://cwe.mitre.org/data/definitions/78.html nan nan nan nan nan 5.3.9 1 829 nan Verify that the application protects against Local File Inclusion (LFI) or Remote File Inclusion (RFI) attacks. https://cwe.mitre.org/data/definitions/829.html nan nan nan nan nan 5.3.10 1 643 nan Verify that the application protects against XPath injection or XML injection attacks. ( C4 ) https://cwe.mitre.org/data/definitions/643.html nan nan nan nan Memory, String and Unmanaged Code Requirements 5.4.1 2 120 nan Verify that the application uses memory-safe string, safer memory copy and pointer arithmetic to detect or prevent stack, buffer, or heap overflows. https://cwe.mitre.org/data/definitions/120.html nan nan nan nan nan 5.4.2 2 134 nan Verify that format strings do not take potentially hostile input, and are constant. https://cwe.mitre.org/data/definitions/134.html nan nan nan nan nan 5.4.3 2 190 nan Verify that sign, range, and input validation techniques are used to prevent integer overflows. https://cwe.mitre.org/data/definitions/190.html nan nan nan nan Deserialization Prevention Requirements 5.5.1 1 502 nan Verify that serialized objects use integrity checks or are encrypted to prevent hostile object creation or data tampering. ( C5 ) https://cwe.mitre.org/data/definitions/502.html nan nan nan nan nan 5.5.2 1 611 nan Verify that the application correctly restricts XML parsers to only use the most restrictive configuration possible and to ensure that unsafe features such as resolving external entities are disabled to prevent XML eXternal Entity (XXE) attacks. https://cwe.mitre.org/data/definitions/611.html nan nan nan nan nan 5.5.3 1 502 nan Verify that deserialization of untrusted data is avoided or is protected in both custom code and third-party libraries (such as JSON, XML and YAML parsers). https://cwe.mitre.org/data/definitions/502.html nan nan nan nan nan 5.5.4 1 95 nan Verify that when parsing JSON in browsers or JavaScript-based backends, JSON.parse is used to parse the JSON document. Do not use eval() to parse JSON. https://cwe.mitre.org/data/definitions/95.html nan nan nan nan ...","title":"InputValidation"}]}